package PulseOx_Forwarding_Display
public
	with ErrorLibrary, MAP_Errors, PulseOx_Forwarding_Errors;
	with PulseOx_Forwarding_Types, MAP_Properties, PulseOx_Forwarding_Properties;

	process PulseOx_Display_Process
		features
			DispDerivedAlarm: in event port;
			DispShowSpO2: out feature;
			DispSpO2: in event data port PulseOx_Forwarding_Types::SpO2;
		properties
			MAP_Properties::Process_Type => display;
			MAP_Properties::Component_Type => actuator;
		annex EMV2 {**
			use types PulseOx_Forwarding_Errors;
			
			error propagations
				DispDerivedAlarm: in propagation {MissedAlarm, BogusAlarm};
				flows
					MissedAlarmsEndHere: error sink DispDerivedAlarm {MissedAlarm};
					BogusAlarmsEndHere: error sink DispDerivedAlarm {BogusAlarm};
			end propagations;
		**};
	end PulseOx_Display_Process;

	process implementation PulseOx_Display_Process.imp
		subcomponents
			UpdateSpO2Thread: thread UpdateSpO2Thread.imp;
			HandleAlarmThread: thread HandleAlarmThread.imp;
		connections
			incoming_spo2: port DispSpO2 -> UpdateSpO2Thread.SpO2;
			incoming_alarm: port DispDerivedAlarm -> HandleAlarmThread.Alarm;
		annex EMV2 {**
			use types PulseOx_Forwarding_Errors;
			
			error propagations
				flows
					AlarmOmission: error sink DispDerivedAlarm {MissedAlarm};
			end propagations;
		**};
	end PulseOx_Display_Process.imp;

	thread UpdateSpO2Thread
		features
			SpO2: in event data port PulseOx_Forwarding_Types::SpO2;
	end UpdateSpO2Thread;

	thread implementation UpdateSpO2Thread.imp
	end UpdateSpO2Thread.imp;

	thread HandleAlarmThread
		features
			Alarm: in event port;
		properties
			Timing_Properties::Deadline => 75ms;
			Timing_Properties::Period => 95ms;
			MAP_Properties::Worst_Case_Execution_Time => 7ms;
	end HandleAlarmThread;

	thread implementation HandleAlarmThread.imp
	end HandleAlarmThread.imp;

end PulseOx_Forwarding_Display;