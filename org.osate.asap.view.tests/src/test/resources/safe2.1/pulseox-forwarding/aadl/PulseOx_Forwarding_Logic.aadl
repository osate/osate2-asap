package PulseOx_Forwarding_Logic
public
	with PulseOx_Forwarding_Errors;
with PulseOx_Forwarding_Types, MAP_Properties, MAP_Error_Properties;

	process PulseOx_Logic_Process
	features
		LogicSpO2 : in event data port PulseOx_Forwarding_Types::SpO2; -- How do I model a error flow with a data port?
		LogicDerivedAlarm : out event port
		{MAP_Properties::Output_Rate => 200 ms .. 400 ms;};
	flows
		flowPath : flow path LogicSpO2 -> LogicDerivedAlarm;		
	properties
		MAP_Properties::Process_Type => logic;
		MAP_Properties::Component_Type => controller;
	annex AGREE {**
		eq inputEvent : bool = event (LogicSpO2);
		eq outputEvent : bool = event (LogicDerivedAlarm); 
		
		assume "SpO2 in range" : LogicSpO2 > 50.0;
		assume "Sensor readings are received at 5hz" : condition inputEvent occurs sporadic with IAT 200.0;
		guarantee "Alarms are produced at 5hz" : condition outputEvent occurs sporadic with IAT 200.0;
	**};
	annex EMV2 {**
			use types PulseOx_Forwarding_Errors;
			
			error propagations
				LogicSpO2: in propagation {SpO2ValueHigh, SpO2ValueLow, EarlySpO2, LateSpO2, NoSpO2};
				LogicDerivedAlarm: out propagation {MissedAlarm, BogusAlarm};
			end propagations;
		**};
	end PulseOx_Logic_Process;

	process implementation PulseOx_Logic_Process.imp
	subcomponents
		CheckSpO2Thread : thread CheckSpO2Thread.imp;
		StoreSpO2Thread : thread StoreSpO2Thread.imp;
		SpO2Val : data PulseOx_Forwarding_Types::SpO2
		{MAP_Error_Properties::Process_Variable => true;};
	connections
		incoming_spo2_con : port LogicSpO2 -> StoreSpO2Thread.incoming_spo2;
		spo2_to_alarm : data access StoreSpO2Thread.provides_spo2 -> CheckSpO2Thread.SpO2;
		outgoing_alarm : port CheckSpO2Thread.Alarm -> LogicDerivedAlarm;
	flows
		flowPath : flow path LogicSpO2 -> incoming_spo2_con -> StoreSpO2Thread.thdFlow -> spo2_to_alarm -> CheckSpO2Thread.thdFlow -> outgoing_alarm -> LogicDerivedAlarm;
	annex EMV2 {**
			use types MAP_Errors, PulseOx_Forwarding_Errors;
			use behavior PulseOx_Forwarding_Errors::PulseOxStatus;
			
			error propagations
			flows
				-- Error path examples
				HighSpO2LeadsToMissedAlarm: error path LogicSpO2 {SpO2ValueHigh} -> LogicDerivedAlarm {MissedAlarm};
				LowSpO2CausesBogusAlarm: error path LogicSpO2 {SpO2ValueLow} -> LogicDerivedAlarm {BogusAlarm};
				LateSpO2DoesNothing: error sink LogicSpO2 {LateSpO2};
				EarlySpO2DoesNothing: error sink LogicSpO2 {EarlySpO2};
				BogusAlarmsArePossible: error source LogicDerivedAlarm {BogusAlarm} when {Deterioration};
			end propagations;
			
----			component error behavior
----			events
----				-- Detectable external problems
----				TimeoutViolation: error event {EarlySpO2};
----				TimestampViolation: error event {LateSpO2};
----					-- Internal problems that cause successor dangers
----				PulseOxDeteriorates: error event {Deterioration};
----			transitions
----				SwitchToNoOutput: Normal -[TimeoutViolation or TimestampViolation]-> NoOutput;
----				ClinicianTurnsOffPulseOx: Normal -[PulseOxDeteriorates]-> NoOutput;
----			end component;
--			
--			properties
--				MAP_Error_Properties::ExternallyCausedDanger => [
--							ProcessVariableValue => reference (SpO2Val);
--							ProcessVariableConstraint => "Higher than true value";
--							Explanation => "The SpO2 value is too high, leading the app to fail to issue an alarm when it should";
--						] applies to HighSpO2LeadsToMissedAlarm;
--				MAP_Error_Properties::ExternallyCausedDanger => [
--							Explanation => "Placeholder explanation";
--						] applies to MultipleInputs;
--				MAP_Error_Properties::ExternallyCausedDanger => [
--							Explanation => "Placeholder explanation";
--						] applies to MultipleOutputs;
--				MAP_Error_Properties::ExternallyCausedDanger => [
--							Explanation => "Placeholder explanation";
--						] applies to MtoN;
----				MAP_Error_Properties::RuntimeErrorDetection => [
----							ErrorDetectionApproach => Concurrent;
----							Explanation => "Minimum separation between messages are added to detect early arrivals";
----						] applies to TimeoutViolation;
----				MAP_Error_Properties::RuntimeErrorDetection => [
----							ErrorDetectionApproach => Concurrent;
----							Explanation => "Messages should be timestamped so latency violations can be detected";
----						] applies to TimestampViolation;
----				MAP_Error_Properties::RuntimeErrorDetection => [
----							ErrorDetectionApproach => Preemptive;
----							Explanation => "The pulse oximeter should be periodically inspected for signs of wear";
----						] applies to PulseOxDeteriorates;
----				MAP_Error_Properties::RuntimeErrorHandling => [
----							ErrorHandlingApproach => Rollforward;
----							Explanation => "The pump switches into a fail-safe mode, ie, it runs at a minimal (KVO) rate";
----						] applies to SwitchToNoOutput;
----				MAP_Error_Properties::InternallyCausedDanger => [
----							Explanation => "The pulse oximeter can deteriorate, causing inappropriate alarms.";
----						] applies to BogusAlarmsArePossible;
----				MAP_Error_Properties::DesignTimeFaultDetection => [
----							FaultDetectionApproach => Testing;
----							Explanation => "The PulseOx is poorly maintained, and reports bad values due to deterioration. It should be tested periodically to ensure proper functioning.";
----						] applies to PulseOxDeteriorates;
----				MAP_Error_Properties::RuntimeFaultHandling => [
----							FaultHandlingApproach => Diagnosis;
----							ErrorHandlingApproach => Rollforward;
----							Explanation => "The nurse sees that the pulse oximeter has deteriorated and turns it off.";
----						] applies to ClinicianTurnsOffPulseOx;
--				MAP_Error_Properties::EliminatedFaults => [
--							FaultTypes => (
--										reference (SoftwareBug),
--										reference (BadSoftwareDesign),
--										reference (CompromisedSoftware),
--										reference (CompromisedHardware),
--										reference (HardwareBug),
--										reference (BadHardwareDesign),
--										reference (ProductionDefect)
--									);
--							Explanation => "We're using a 'proven in use' app";
--						] applies to Normal;
--				MAP_Error_Properties::EliminatedFaults => [
--							FaultTypes => (
--										reference (AdversaryAccessesHardware),
--										reference (AdversaryAccessesSoftware)
--									);
--							Explanation => "The hospital has physical security measures in place";
--						] applies to Normal;
--				MAP_Error_Properties::EliminatedFaults => [
--							FaultTypes => (
--										reference (SyntaxMismatch),
--										reference (RateMismatch),
--										reference (SemanticMismatch)
--									);
--							Explanation => "The app logic isn't a connection between two components";
--						] applies to Normal;
		**};
	end PulseOx_Logic_Process.imp;
	
	thread CheckSpO2Thread
	features
		Alarm : out event port;
		SpO2 : requires data access PulseOx_Forwarding_Types::SpO2;
	flows
		thdFlow : flow path SpO2 -> Alarm;
	properties
		Thread_Properties::Dispatch_Protocol => Periodic;
	end CheckSpO2Thread;
	
	thread implementation CheckSpO2Thread.imp
	end CheckSpO2Thread.imp;
	
	thread StoreSpO2Thread
		features
			incoming_spo2 : in data port PulseOx_Forwarding_Types::SpO2;
			provides_spo2 : provides data access PulseOx_Forwarding_Types::SpO2;
		flows
			thdFlow : flow path incoming_spo2 -> provides_spo2;
	end StoreSpO2Thread;
	
	thread implementation StoreSpO2Thread.imp
		
	end StoreSpO2Thread.imp;
	
end PulseOx_Forwarding_Logic;