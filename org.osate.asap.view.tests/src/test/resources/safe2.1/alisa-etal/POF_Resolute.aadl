package POF_Resolute
public
	annex Resolute {**

	-- elements have a response time: 
	has_Response_Time(cp: aadl)<=
	** cp " must have a response time specified" **
		has_property(cp, Communication_Properties::Latency)
	-- used for sensor, process, actuator -- delegate to ALISA
	
	-- end-to-end latency is w/in specified bound
	
	
	
	-- alternatively, consider iterating over all features in the model
	--  and making sure they have a type
	has_connection_end_types(c: component) <=
	** "All connection ends in " c " must have a type declared" **
--		-- This may have to be custom-written: there's some good
--		-- connection utility stuff in Resolute_Util.aadl, though
--		-- but the basic idea is to iterate over the connections from
--		-- all_reachable_connections and then check each end to verify typing.
--		let reachable_conns : {connection} = all_reachable_connections(c);
--		forall(comp : all_reachable_components(c)).forall(feat : features(comp)).print_feat_name(feat)
--		forall(cn: component).contained(cn, c) => has_type(c)
		let filtered : {component} = {cn for (cn:component) | contained(cn, c)};
		forall(fc: filtered).forall(feat : features(fc)).print_feat_name(feat)
		
	print_feat_name(f: feature) : bool =
	if (has_type(f)) then
		true		
	else
		let err : bool = debug(f, " does not have a type!");
		false
	
	**};
end POF_Resolute;